#!/spfs/bin/python3
# Copyright (c) Sony Pictures Imageworks, et al.
# SPDX-License-Identifier: Apache-2.0
# https://github.com/imageworks/spk

from functools import reduce
from packaging.requirements import Requirement
from pathlib import Path
from typing import Any, Dict, List, NamedTuple, NewType, Optional, Set, Tuple
import argparse
import json
import logging
import operator
import os
import packaging.markers
import packaging.version
import pkginfo
import re
import subprocess
import sys
import tempfile


logging.basicConfig(format="%(message)s", stream=sys.stdout, level=logging.INFO)
_LOGGER = logging.getLogger()
BAKED_PYTHON_PACKAGES = ("setuptools", "pip", "wheel")

# Longest value this will put into the metadata -> license field
LICENSE_FIELD_LIMIT = 80
TRUNCATED_VALUE_INDICATOR = "..."
# Long license values are truncated to this number of characters to
# allow "..." to be added to the value so show it has been truncated.
LICENSE_FIELD_TRUNCATION_POINT = LICENSE_FIELD_LIMIT - len(TRUNCATED_VALUE_INDICATOR)


def spk_exe() -> str:
    return os.environ.get("SPK_BIN_PATH", "spk")


def main() -> int:
    pip_cmd = argparse.ArgumentParser(
        "spk-convert-pip", description="Convert and import packages using pip"
    )
    pip_cmd.add_argument(
        "-v", "--verbose",  action="count", dest="verbose", default=0,
        help="Increase the verbosity of the output"
    )
    pip_cmd.add_argument(
        "--python-version", default="3.7", help="The version of python to install for"
    )
    pip_cmd.add_argument("--python-abi", help="The python abi to target")
    pip_cmd.add_argument(
        "--target-repo",
        "-r",
        type=str,
        metavar="NAME",
        default="origin",
        help="The repository to publish to. Any configured spfs repository can be named here.",
    )
    group = pip_cmd.add_mutually_exclusive_group()
    group.add_argument(
        "--publish",
        default=None,
        action="store_true",
        help="Also publish the packages after conversion. Does not ask if you want to publish, assumes yes",
    )
    group.add_argument(
        "--no-publish",
        default=None,
        action="store_true",
        help="Do not publish the packages after conversion. Does not ask if you want to publish, assumes no",
    )
    pip_cmd.add_argument(
        "--force",
        "-f",
        action="store_true",
        default=False,
        help="Forcefully overwrite any existing publishes",
    )
    pip_cmd.add_argument(
        "--no-deps",
        dest="deps",
        action="store_false",
        default=True,
        help="Do not follow and convert dependencies of the requested pip packages",
    )
    pip_cmd.add_argument(
        "packages",
        nargs="+",
        metavar="NAME[VERSION]",
        help="The pip packages to import (eg: pytest,  PySide2>=5)",
    )
    original_cmd_and_args = " ".join(sys.argv)
    args = pip_cmd.parse_args()

    if args.verbose > 0:
        _LOGGER.setLevel(logging.DEBUG)

    specs = []
    importer = PipImporter().with_cli_args(original_cmd_and_args).recursive(args.deps)
    if args.python_version:
        importer.with_python_version(args.python_version)
    if args.python_abi:
        importer.with_python_abi(args.python_abi)

    for name in args.packages:
        req = Requirement(name)
        specs.extend(importer.import_package(req))

    print("\nThe following packages were converted:\n")
    for spec in specs:
        print(f"  {spec.get('pkg')}")
    print("")

    if args.publish is None and not args.no_publish:
        print("These packages are now available in the local repository")
        args.publish = bool(
            input("Do you want to also publish these packages? [y/N]: ").lower()
            in ("y", "yes")
        )

    if args.publish:
        cmd = [spk_exe(), "publish", "-r", args.target_repo]
        if args.force:
            cmd.append("--force")
        cmd.extend([spec["pkg"] for spec in specs])
        subprocess.check_call(cmd)


SpkVersionRange = NewType("SpkVersionRange", str)


class DepRequirement(NamedTuple):
    pypi_name: str
    requirements: List[Tuple[SpkVersionRange, Requirement]]


class VisitedPackage(NamedTuple):
    extras: Set[str]
    """The union of all the extras that were required of this package as
    have been encountered so far."""
    filenames: Set[str]
    """All the filenames that have been processed for this package so far."""


class PipImporter:
    def __init__(self) -> None:
        self._python_version = "3.7"
        self._python_abi: Optional[str] = "cp37m"
        self._follow_deps = True
        self._visited: Dict[str, VisitedPackage] = {}
        self._cli_args = ""

    def with_cli_args(self, cli_args: str) -> "PipImporter":
        self._cli_args = cli_args
        return self

    def with_python_version(self, version: str) -> "PipImporter":
        assert (
            re.match(r"\d+.\d+", version) is not None
        ), "python version must be in the form x.x"
        self._python_version = version
        return self

    def with_python_abi(self, version: Optional[str]) -> "PipImporter":
        self._python_abi = version
        return self

    def recursive(self, recursive: bool) -> "PipImporter":
        self._follow_deps = recursive
        return self

    def import_package(self, req: Requirement) -> List[Dict[str, Any]]:
        _LOGGER.info(f"fetching pip package... {req}")

        converted = []
        with tempfile.TemporaryDirectory() as _tmpdir:
            tmpdir = Path(_tmpdir)

            # Stringify Requirement without marker
            orig_markers = req.marker
            try:
                req.marker = None

                pip_command = [
                    "pip",
                    "download",
                    f"{req}",
                    "--python-version",
                    self._python_version,
                    "--abi",
                    self._python_abi,
                    "--no-deps",
                    "--dest",
                    _tmpdir,
                ]
            finally:
                req.marker = orig_markers

            _LOGGER.debug(" ".join(pip_command))
            try:
                subprocess.check_output(pip_command, stderr=subprocess.STDOUT)
            except subprocess.CalledProcessError as e:
                print(e.stdout.decode())
                raise RuntimeError("failed to download pip package")
                return []

            downloaded = list(tmpdir.glob(f"*"))
            assert (
                len(downloaded) == 1
            ), f"Expected pip to download one file for {req.name} {downloaded}"

            # As the dependency tree is processed, deeper dependencies may
            # refine the version required for a package that has already been
            # processed. This can be detected by checking if the file
            # downloaded has not been downloaded before. Only skip processing
            # if the same file has been seen. Otherwise, this other version of
            # the package needs to be processed too.
            downloaded = downloaded[0]
            visited = self._visited.get(req.name)
            if visited is not None:
                if downloaded.name in visited.filenames:
                    # The previously imported package is okay only if all the
                    # required extras for that package were enabled when it was
                    # last imported.
                    if visited.extras.issuperset(req.extras):
                        _LOGGER.debug(f"found recursive dependency {req.name}")
                        return []
                    else:
                        _LOGGER.debug(
                            f"Need to re-package {req.name} with additional extras"
                        )
                else:
                    _LOGGER.debug(
                        f"Need to re-package different download of {req.name}; {downloaded.name} not in {visited.filenames}"
                    )
                visited.extras.update(req.extras)
                visited.filenames.add(downloaded.name)

                # If re-importing a package imported before, it means that we
                # encountered another package that is depending on a different
                # version of this package. But that other package may not be
                # asking for the same extras as the original request for the
                # package. In order for this re-imported package to satisfy
                # the original request, we need to enable the same features
                # again here.
                req.extras.update(visited.extras)
            else:
                self._visited[req.name] = VisitedPackage(
                    extras=set(req.extras), filenames={str(downloaded.name)}
                )

            converted.extend(self.process_pip_package(req, downloaded))

        return converted

    def process_pip_package(
        self, requester: Requirement, filepath: Path
    ) -> List[Dict[str, Any]]:
        if filepath.name.endswith(".whl"):
            info = pkginfo.Wheel(filepath)
        elif filepath.name.endswith(".tar.gz") or filepath.name.endswith(".zip"):
            info = pkginfo.SDist(filepath)
        else:
            raise NotImplementedError(
                f"No logic to install distribution format: {filepath}"
            )
        return self._process_package(requester, info)

    def _process_package(
        self, requester: Requirement, info: pkginfo.Distribution
    ) -> List[Dict[str, Any]]:
        assert not info.requires, "No support for installation requirements"
        assert not info.requires_external, "No support for external requirements"
        assert not info.supported_platforms, "No support for supported platforms field"

        # The spk default is "Unlicensed", which seems odd
        package_license = "Unknown"
        if hasattr(info, "license"):
            if info.license is not None:
                package_license = str(info.license)
                if len(package_license) > LICENSE_FIELD_TRUNCATION_POINT:
                    package_license = (
                        package_license[:LICENSE_FIELD_TRUNCATION_POINT]
                        + TRUNCATED_VALUE_INDICATOR
                    )

        spec = {
            "pkg": f"{_to_spk_name(info.name)}/{_to_spk_version(info.version)}",
            "api": "v0/package",
            "sources": [],
            "meta": {
                "license": package_license,
                "labels": {
                    "spk:generated_by": "spk-convert-pip",
                    "spk-convert-pip:cli": self._cli_args,
                },
            },
            "build": {
                "options": [
                    {"var": "os"},
                    {"var": "arch"},
                    {"var": "distro"},
                    {"pkg": f"python/{self._python_version}"},
                    {"pkg": f"python-pip"},
                ]
            },
            "install": {
                "requirements": [],
            },
        }

        if info.name == "pip":
            spec["build"]["validation"] = {"rules": [{"allow": "RecursiveBuild"}]}

        for extra in requester.extras:
            spec["build"]["options"].append({"var": f"python_extra_{extra}/true"})

        api_var = f"/{self._python_abi}" if self._python_abi else ""
        spec["build"]["options"].append({"var": f"python.abi{api_var}"})

        spec["build"]["script"] = [
            "export PYTHONNOUSERSITE=1",
            "export PYTHONDONTWRITEBYTECODE=1",
            f"/spfs/bin/python -BEs -m pip install {info.name}=={info.version} --no-deps",
        ]

        builds = []
        if info.requires_python:
            _LOGGER.debug(
                "ignoring defined python range, other version of python will need to have this package reconverted"
            )
        # python packages can support a wide range of versions, and present dynamic
        # requirements based on the version used - spk does not do this so instead
        # we restrict the package to the python version that it's being imported for
        spec["install"]["requirements"].append(
            {"pkg": f"python/{self._python_version}"}
        )

        # the package may specify multiple requirements for the same package,
        # for example:
        #    Requires-Dist: numpy (>=1.17.0) ; python_version >= "3.7"
        #    Requires-Dist: numpy (>=1.17.3) ; python_version >= "3.8"
        #    Requires-Dist: numpy (>=1.19.3) ; python_version >= "3.9"
        dist_requirements: Dict[str, DepRequirement] = {}

        for requirement_str in info.requires_dist:
            req = Requirement(requirement_str)

            if req.marker is not None:
                if not req.marker.evaluate(
                    {
                        "extra": ",".join(requester.extras) or "",
                        "python_version": self._python_version,
                    }
                ):
                    _LOGGER.debug(f"Skip requirement due to markers {requirement_str}")
                    continue

            _LOGGER.debug(f"converting dependency requirement {requirement_str}")

            pypi_name = req.name
            if pypi_name in BAKED_PYTHON_PACKAGES:
                _LOGGER.warning(
                    f"skipping requirement for {pypi_name}, this package cannot be updated with the "
                    "pip conversion since it's baked into the spk python package"
                )
                continue
            spk_name = _to_spk_name(pypi_name)
            spk_version_range = _to_spk_version_range(str(req.specifier) or "*")

            dist_requirements.setdefault(
                spk_name, DepRequirement(pypi_name, [])
            ).requirements.append((spk_version_range, req))

            # Inherit the requester's extras when recursing deeper.
            req.extras |= requester.extras

        for spk_name, requirement in dist_requirements.items():
            # Join all the requirements together and let spk figure out if
            # they are compatible. Example:
            #    ">=1.17.0,>=1.17.3,>=1.19.3"
            spk_requirements = ",".join(
                map(operator.itemgetter(0), requirement.requirements)
            )

            request = {"pkg": f"{spk_name}/{spk_requirements}"}
            spec["install"]["requirements"].append(request)

            def combine_requirements(
                req1: Requirement, req2: Requirement
            ) -> Requirement:
                # SpecifierSet uses &= to combine.
                req1.specifier &= req2.specifier
                # extras are normal sets and use |= to combine.
                req1.extras |= req2.extras
                return req1

            dep_requirement = reduce(
                combine_requirements,
                map(operator.itemgetter(1), requirement.requirements),
            )

            for extra in dep_requirement.extras:
                spec["install"]["requirements"].append(
                    {"var": f"{spk_name}.python_extra_{extra}/true"}
                )

            if self._follow_deps:
                _LOGGER.debug("following dependencies...")

                builds.extend(self.import_package(dep_requirement))

        with tempfile.NamedTemporaryFile("w") as spec_file:
            json.dump(spec, spec_file)
            spec_file.flush()
            _LOGGER.info(f"building generated package spec... {spec['pkg']}")
            try:
                subprocess.check_output(
                    [spk_exe(), "build", "-vv", spec_file.name],
                    stderr=subprocess.STDOUT,
                )
            except subprocess.CalledProcessError as e:
                print(e.stdout.decode())
                raise RuntimeError("failed to build generated package")
                return []

            builds.insert(0, spec)

        return builds


def _to_spk_name(name: str) -> str:
    name = name.lower().replace("_", "-").replace(".", "-")
    if not name.startswith("python-"):
        name = "python-" + name
    return name


def _to_spk_version(version: str) -> str:
    python_version = packaging.version.parse(version)
    spk_version = python_version.base_version
    pre = []
    if python_version.pre is not None:
        name, num = python_version.pre
        pre.append(f"{name}.{num}")
    if python_version.dev is not None:
        pre.append(f"dev.{int(python_version.dev)}")
    if pre:
        spk_version += f"-{','.join(pre)}"
    if python_version.post is not None:
        spk_version += f"+post.{int(python_version.post)}"
    if python_version.local:
        # irrelevant information for compatibility of versions and
        # no equal concept in spk versions specs
        pass

    return spk_version


def _to_spk_version_range(version_range: str) -> SpkVersionRange:
    version_range = version_range.replace(" ", "").strip(",")
    versions = version_range.split(",")
    for i, version in enumerate(versions):
        stripped = version.lstrip("><=!~")
        prefix = version[: -len(stripped)]
        if "*" not in version:
            # handle pre and post release tags added to version numbers if possible
            converted = _to_spk_version(stripped).__str__()
        else:
            converted = stripped
        version = _to_spk_range_prefix(prefix) + converted

        if version[0] == "=" and version.endswith(".*"):
            # "=1.*" becomes "1.*"
            version = version[1:]
        # we cannot combine '~=' and *, but a trailing * is the
        # most common and is semantically equal to the same version
        # without a wildcard
        # !=3.7.* ==> !=3.7
        elif version[0] in {"!", "="} and version.endswith(".*"):
            version = f"{version[:-2]}"
        # spk uses a single equals sign for exact version, where pip
        # would use a double
        # ==1.4.0 --> =1.4.0
        if version.startswith("=="):
            version = version[1:]
        versions[i] = version

    return SpkVersionRange(",".join(versions))


def _to_spk_range_prefix(prefix: str) -> str:
    pip_to_spk = {
        ">": ">",
        "<": "<",
        ">=": ">=",
        "<=": "<=",
        "==": "=",
        "~=": "~",
        "!=": "!=",
        "": "",
    }
    try:
        return pip_to_spk[prefix]
    except KeyError:
        raise ValueError(f"Unhandled pip version range prefix: {prefix}")


if "SCRIPT_TESTING" in os.environ:
    for version, expected in [
        ("1.0.0", "1.0.0"),
        ("1.0.dev456", "1.0-dev.456"),
        ("1.0a1", "1.0-a.1"),
        ("1.0a2.dev456", "1.0-a.2,dev.456"),
        ("1.0a12.dev456", "1.0-a.12,dev.456"),
        ("1.0a12", "1.0-a.12"),
        ("1.0b1.dev456", "1.0-b.1,dev.456"),
        ("1.0b2", "1.0-b.2"),
        ("1.0b2.post345.dev456", "1.0-b.2,dev.456+post.345"),
        ("1.0b2.post345", "1.0-b.2+post.345"),
        ("1.0rc1.dev456", "1.0-dev.456,rc.1"),
        ("1.0rc1", "1.0-rc.1"),
        ("1.0", "1.0"),
        ("1.0+abc.5", "1.0"),
        ("1.0+abc.7", "1.0"),
        ("1.0+5", "1.0"),
        ("1.0.post456.dev34", "1.0-dev.34+post.456"),
        ("1.0.post456", "1.0+post.456"),
        ("1.1.dev1", "1.1-dev.1"),
    ]:
        actual = _to_spk_version(version)
        assert actual == expected
    sys.exit(0)


if __name__ == "__main__":
    try:
        sys.exit(main())
    except Exception as e:
        _LOGGER.error(str(e))
        sys.exit(1)
