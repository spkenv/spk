// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_OBJECT: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_OBJECT: u8 = 4;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_OBJECT: [Object; 5] = [
  Object::NONE,
  Object::Platform,
  Object::Layer,
  Object::Manifest,
  Object::Blob,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Object(pub u8);
#[allow(non_upper_case_globals)]
impl Object {
  pub const NONE: Self = Self(0);
  pub const Platform: Self = Self(1);
  pub const Layer: Self = Self(2);
  pub const Manifest: Self = Self(3);
  pub const Blob: Self = Self(4);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 4;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::Platform,
    Self::Layer,
    Self::Manifest,
    Self::Blob,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::Platform => Some("Platform"),
      Self::Layer => Some("Layer"),
      Self::Manifest => Some("Manifest"),
      Self::Blob => Some("Blob"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Object {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Object {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Object {
    type Output = Object;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Object {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Object {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Object {}
pub struct ObjectUnionTableOffset {}

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ANNOTATION_VALUE: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ANNOTATION_VALUE: u8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ANNOTATION_VALUE: [AnnotationValue; 3] = [
  AnnotationValue::NONE,
  AnnotationValue::AnnotationString,
  AnnotationValue::AnnotationDigest,
];

/// Annotation data that is small enough is stored as a string in the
/// layer, large data is stored outside the layer in a blob object
/// pointed at by a digest
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct AnnotationValue(pub u8);
#[allow(non_upper_case_globals)]
impl AnnotationValue {
  pub const NONE: Self = Self(0);
  pub const AnnotationString: Self = Self(1);
  pub const AnnotationDigest: Self = Self(2);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::AnnotationString,
    Self::AnnotationDigest,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::AnnotationString => Some("AnnotationString"),
      Self::AnnotationDigest => Some("AnnotationDigest"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for AnnotationValue {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for AnnotationValue {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for AnnotationValue {
    type Output = AnnotationValue;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for AnnotationValue {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for AnnotationValue {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for AnnotationValue {}
pub struct AnnotationValueUnionTableOffset {}

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ENTRY_KIND: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ENTRY_KIND: u8 = 5;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ENTRY_KIND: [EntryKind; 3] = [
  EntryKind::Blob,
  EntryKind::Tree,
  EntryKind::Mask,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct EntryKind(pub u8);
#[allow(non_upper_case_globals)]
impl EntryKind {
  pub const Blob: Self = Self(0);
  pub const Tree: Self = Self(4);
  pub const Mask: Self = Self(5);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 5;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Blob,
    Self::Tree,
    Self::Mask,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Blob => Some("Blob"),
      Self::Tree => Some("Tree"),
      Self::Mask => Some("Mask"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for EntryKind {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for EntryKind {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for EntryKind {
    type Output = EntryKind;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for EntryKind {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for EntryKind {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for EntryKind {}
/// Digest is the result of a hashing operation over binary data.
// struct Digest, aligned to 1
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Digest(pub [u8; 32]);
impl Default for Digest { 
  fn default() -> Self { 
    Self([0; 32])
  }
}
impl core::fmt::Debug for Digest {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Digest")
      .field("bytes", &self.bytes())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Digest {}
impl<'a> flatbuffers::Follow<'a> for Digest {
  type Inner = &'a Digest;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Digest>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Digest {
  type Inner = &'a Digest;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Digest>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Digest {
    type Output = Digest;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Digest as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Digest {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Digest {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    bytes: &[u8; 32],
  ) -> Self {
    let mut s = Self([0; 32]);
    s.set_bytes(bytes);
    s
  }

  pub fn bytes(&'a self) -> flatbuffers::Array<'a, u8, 32> {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid array in this slot
    unsafe { flatbuffers::Array::follow(&self.0, 0) }
  }

  pub fn set_bytes(&mut self, items: &[u8; 32]) {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid array in this slot
    unsafe { flatbuffers::emplace_scalar_array(&mut self.0, 0, items) };
  }

}

pub enum PlatformOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Platform<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Platform<'a> {
  type Inner = Platform<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Platform<'a> {
  pub const VT_LAYERS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Platform { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args PlatformArgs<'args>
  ) -> flatbuffers::WIPOffset<Platform<'bldr>> {
    let mut builder = PlatformBuilder::new(_fbb);
    if let Some(x) = args.layers { builder.add_layers(x); }
    builder.finish()
  }


  #[inline]
  pub fn layers(&self) -> flatbuffers::Vector<'a, Digest> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Digest>>>(Platform::VT_LAYERS, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for Platform<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Digest>>>("layers", Self::VT_LAYERS, true)?
     .finish();
    Ok(())
  }
}
pub struct PlatformArgs<'a> {
    pub layers: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Digest>>>,
}
impl<'a> Default for PlatformArgs<'a> {
  #[inline]
  fn default() -> Self {
    PlatformArgs {
      layers: None, // required field
    }
  }
}

pub struct PlatformBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PlatformBuilder<'a, 'b> {
  #[inline]
  pub fn add_layers(&mut self, layers: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Digest>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Platform::VT_LAYERS, layers);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PlatformBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PlatformBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Platform<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Platform::VT_LAYERS,"layers");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Platform<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Platform");
      ds.field("layers", &self.layers());
      ds.finish()
  }
}
pub enum LayerOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Layer<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Layer<'a> {
  type Inner = Layer<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Layer<'a> {
  pub const VT_MANIFEST: flatbuffers::VOffsetT = 4;
  pub const VT_ANNOTATIONS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Layer { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args LayerArgs<'args>
  ) -> flatbuffers::WIPOffset<Layer<'bldr>> {
    let mut builder = LayerBuilder::new(_fbb);
    if let Some(x) = args.annotations { builder.add_annotations(x); }
    if let Some(x) = args.manifest { builder.add_manifest(x); }
    builder.finish()
  }


  #[inline]
  pub fn manifest(&self) -> Option<&'a Digest> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Digest>(Layer::VT_MANIFEST, None)}
  }
  #[inline]
  pub fn annotations(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Annotation<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Annotation>>>>(Layer::VT_ANNOTATIONS, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for Layer<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<Digest>("manifest", Self::VT_MANIFEST, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Annotation>>>>("annotations", Self::VT_ANNOTATIONS, true)?
     .finish();
    Ok(())
  }
}
pub struct LayerArgs<'a> {
    pub manifest: Option<&'a Digest>,
    pub annotations: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Annotation<'a>>>>>,
}
impl<'a> Default for LayerArgs<'a> {
  #[inline]
  fn default() -> Self {
    LayerArgs {
      manifest: None,
      annotations: None, // required field
    }
  }
}

pub struct LayerBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> LayerBuilder<'a, 'b> {
  #[inline]
  pub fn add_manifest(&mut self, manifest: &Digest) {
    self.fbb_.push_slot_always::<&Digest>(Layer::VT_MANIFEST, manifest);
  }
  #[inline]
  pub fn add_annotations(&mut self, annotations: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Annotation<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Layer::VT_ANNOTATIONS, annotations);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> LayerBuilder<'a, 'b> {
    let start = _fbb.start_table();
    LayerBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Layer<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Layer::VT_ANNOTATIONS,"annotations");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Layer<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Layer");
      ds.field("manifest", &self.manifest());
      ds.field("annotations", &self.annotations());
      ds.finish()
  }
}
pub enum ManifestOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Manifest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Manifest<'a> {
  type Inner = Manifest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Manifest<'a> {
  pub const VT_TREES: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Manifest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ManifestArgs<'args>
  ) -> flatbuffers::WIPOffset<Manifest<'bldr>> {
    let mut builder = ManifestBuilder::new(_fbb);
    if let Some(x) = args.trees { builder.add_trees(x); }
    builder.finish()
  }


  /// Must be non-empty
  #[inline]
  pub fn trees(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Tree<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Tree>>>>(Manifest::VT_TREES, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for Manifest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Tree>>>>("trees", Self::VT_TREES, true)?
     .finish();
    Ok(())
  }
}
pub struct ManifestArgs<'a> {
    pub trees: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Tree<'a>>>>>,
}
impl<'a> Default for ManifestArgs<'a> {
  #[inline]
  fn default() -> Self {
    ManifestArgs {
      trees: None, // required field
    }
  }
}

pub struct ManifestBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ManifestBuilder<'a, 'b> {
  #[inline]
  pub fn add_trees(&mut self, trees: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Tree<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Manifest::VT_TREES, trees);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ManifestBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ManifestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Manifest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Manifest::VT_TREES,"trees");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Manifest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Manifest");
      ds.field("trees", &self.trees());
      ds.finish()
  }
}
pub enum BlobOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Blobs represent an arbitrary chunk of binary data, usually a file.
pub struct Blob<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Blob<'a> {
  type Inner = Blob<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Blob<'a> {
  pub const VT_SIZE_: flatbuffers::VOffsetT = 4;
  pub const VT_PAYLOAD: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Blob { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args BlobArgs<'args>
  ) -> flatbuffers::WIPOffset<Blob<'bldr>> {
    let mut builder = BlobBuilder::new(_fbb);
    builder.add_size_(args.size_);
    if let Some(x) = args.payload { builder.add_payload(x); }
    builder.finish()
  }


  #[inline]
  pub fn size_(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Blob::VT_SIZE_, Some(0)).unwrap()}
  }
  #[inline]
  pub fn payload(&self) -> &'a Digest {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Digest>(Blob::VT_PAYLOAD, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for Blob<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("size_", Self::VT_SIZE_, false)?
     .visit_field::<Digest>("payload", Self::VT_PAYLOAD, true)?
     .finish();
    Ok(())
  }
}
pub struct BlobArgs<'a> {
    pub size_: u64,
    pub payload: Option<&'a Digest>,
}
impl<'a> Default for BlobArgs<'a> {
  #[inline]
  fn default() -> Self {
    BlobArgs {
      size_: 0,
      payload: None, // required field
    }
  }
}

pub struct BlobBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> BlobBuilder<'a, 'b> {
  #[inline]
  pub fn add_size_(&mut self, size_: u64) {
    self.fbb_.push_slot::<u64>(Blob::VT_SIZE_, size_, 0);
  }
  #[inline]
  pub fn add_payload(&mut self, payload: &Digest) {
    self.fbb_.push_slot_always::<&Digest>(Blob::VT_PAYLOAD, payload);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> BlobBuilder<'a, 'b> {
    let start = _fbb.start_table();
    BlobBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Blob<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Blob::VT_PAYLOAD,"payload");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Blob<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Blob");
      ds.field("size_", &self.size_());
      ds.field("payload", &self.payload());
      ds.finish()
  }
}
pub enum AnnotationStringOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Needed because unions have to contain tables
pub struct AnnotationString<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AnnotationString<'a> {
  type Inner = AnnotationString<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AnnotationString<'a> {
  pub const VT_DATA: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AnnotationString { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args AnnotationStringArgs<'args>
  ) -> flatbuffers::WIPOffset<AnnotationString<'bldr>> {
    let mut builder = AnnotationStringBuilder::new(_fbb);
    if let Some(x) = args.data { builder.add_data(x); }
    builder.finish()
  }


  #[inline]
  pub fn data(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnnotationString::VT_DATA, None)}
  }
}

impl flatbuffers::Verifiable for AnnotationString<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("data", Self::VT_DATA, false)?
     .finish();
    Ok(())
  }
}
pub struct AnnotationStringArgs<'a> {
    pub data: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for AnnotationStringArgs<'a> {
  #[inline]
  fn default() -> Self {
    AnnotationStringArgs {
      data: None,
    }
  }
}

pub struct AnnotationStringBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AnnotationStringBuilder<'a, 'b> {
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnnotationString::VT_DATA, data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AnnotationStringBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AnnotationStringBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AnnotationString<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AnnotationString<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AnnotationString");
      ds.field("data", &self.data());
      ds.finish()
  }
}
pub enum AnnotationDigestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Needed because unions have to contain tables
pub struct AnnotationDigest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AnnotationDigest<'a> {
  type Inner = AnnotationDigest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AnnotationDigest<'a> {
  pub const VT_DIGEST: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AnnotationDigest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args AnnotationDigestArgs<'args>
  ) -> flatbuffers::WIPOffset<AnnotationDigest<'bldr>> {
    let mut builder = AnnotationDigestBuilder::new(_fbb);
    if let Some(x) = args.digest { builder.add_digest(x); }
    builder.finish()
  }


  #[inline]
  pub fn digest(&self) -> Option<&'a Digest> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Digest>(AnnotationDigest::VT_DIGEST, None)}
  }
}

impl flatbuffers::Verifiable for AnnotationDigest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<Digest>("digest", Self::VT_DIGEST, false)?
     .finish();
    Ok(())
  }
}
pub struct AnnotationDigestArgs<'a> {
    pub digest: Option<&'a Digest>,
}
impl<'a> Default for AnnotationDigestArgs<'a> {
  #[inline]
  fn default() -> Self {
    AnnotationDigestArgs {
      digest: None,
    }
  }
}

pub struct AnnotationDigestBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AnnotationDigestBuilder<'a, 'b> {
  #[inline]
  pub fn add_digest(&mut self, digest: &Digest) {
    self.fbb_.push_slot_always::<&Digest>(AnnotationDigest::VT_DIGEST, digest);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AnnotationDigestBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AnnotationDigestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AnnotationDigest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AnnotationDigest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AnnotationDigest");
      ds.field("digest", &self.digest());
      ds.finish()
  }
}
pub enum AnnotationOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Annotation data held in a layer for use by external tools run inside a runtime
pub struct Annotation<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Annotation<'a> {
  type Inner = Annotation<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Annotation<'a> {
  pub const VT_KEY: flatbuffers::VOffsetT = 4;
  pub const VT_DATA_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_DATA: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Annotation { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args AnnotationArgs<'args>
  ) -> flatbuffers::WIPOffset<Annotation<'bldr>> {
    let mut builder = AnnotationBuilder::new(_fbb);
    if let Some(x) = args.data { builder.add_data(x); }
    if let Some(x) = args.key { builder.add_key(x); }
    builder.add_data_type(args.data_type);
    builder.finish()
  }


  #[inline]
  pub fn key(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Annotation::VT_KEY, None).unwrap()}
  }
  #[inline]
  pub fn data_type(&self) -> AnnotationValue {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AnnotationValue>(Annotation::VT_DATA_TYPE, Some(AnnotationValue::NONE)).unwrap()}
  }
  #[inline]
  pub fn data(&self) -> flatbuffers::Table<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(Annotation::VT_DATA, None).unwrap()}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn data_as_annotation_string(&self) -> Option<AnnotationString<'a>> {
    if self.data_type() == AnnotationValue::AnnotationString {
      let u = self.data();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { AnnotationString::init_from_table(u) })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn data_as_annotation_digest(&self) -> Option<AnnotationDigest<'a>> {
    if self.data_type() == AnnotationValue::AnnotationDigest {
      let u = self.data();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { AnnotationDigest::init_from_table(u) })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for Annotation<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("key", Self::VT_KEY, true)?
     .visit_union::<AnnotationValue, _>("data_type", Self::VT_DATA_TYPE, "data", Self::VT_DATA, true, |key, v, pos| {
        match key {
          AnnotationValue::AnnotationString => v.verify_union_variant::<flatbuffers::ForwardsUOffset<AnnotationString>>("AnnotationValue::AnnotationString", pos),
          AnnotationValue::AnnotationDigest => v.verify_union_variant::<flatbuffers::ForwardsUOffset<AnnotationDigest>>("AnnotationValue::AnnotationDigest", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct AnnotationArgs<'a> {
    pub key: Option<flatbuffers::WIPOffset<&'a str>>,
    pub data_type: AnnotationValue,
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for AnnotationArgs<'a> {
  #[inline]
  fn default() -> Self {
    AnnotationArgs {
      key: None, // required field
      data_type: AnnotationValue::NONE,
      data: None, // required field
    }
  }
}

pub struct AnnotationBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AnnotationBuilder<'a, 'b> {
  #[inline]
  pub fn add_key(&mut self, key: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Annotation::VT_KEY, key);
  }
  #[inline]
  pub fn add_data_type(&mut self, data_type: AnnotationValue) {
    self.fbb_.push_slot::<AnnotationValue>(Annotation::VT_DATA_TYPE, data_type, AnnotationValue::NONE);
  }
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Annotation::VT_DATA, data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AnnotationBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AnnotationBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Annotation<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Annotation::VT_KEY,"key");
    self.fbb_.required(o, Annotation::VT_DATA,"data");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Annotation<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Annotation");
      ds.field("key", &self.key());
      ds.field("data_type", &self.data_type());
      match self.data_type() {
        AnnotationValue::AnnotationString => {
          if let Some(x) = self.data_as_annotation_string() {
            ds.field("data", &x)
          } else {
            ds.field("data", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        AnnotationValue::AnnotationDigest => {
          if let Some(x) = self.data_as_annotation_digest() {
            ds.field("data", &x)
          } else {
            ds.field("data", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("data", &x)
        },
      };
      ds.finish()
  }
}
pub enum TreeOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Tree<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Tree<'a> {
  type Inner = Tree<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Tree<'a> {
  pub const VT_ENTRIES: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Tree { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args TreeArgs<'args>
  ) -> flatbuffers::WIPOffset<Tree<'bldr>> {
    let mut builder = TreeBuilder::new(_fbb);
    if let Some(x) = args.entries { builder.add_entries(x); }
    builder.finish()
  }


  #[inline]
  pub fn entries(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Entry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Entry>>>>(Tree::VT_ENTRIES, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for Tree<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Entry>>>>("entries", Self::VT_ENTRIES, true)?
     .finish();
    Ok(())
  }
}
pub struct TreeArgs<'a> {
    pub entries: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Entry<'a>>>>>,
}
impl<'a> Default for TreeArgs<'a> {
  #[inline]
  fn default() -> Self {
    TreeArgs {
      entries: None, // required field
    }
  }
}

pub struct TreeBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TreeBuilder<'a, 'b> {
  #[inline]
  pub fn add_entries(&mut self, entries: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Entry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Tree::VT_ENTRIES, entries);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TreeBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TreeBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Tree<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Tree::VT_ENTRIES,"entries");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Tree<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Tree");
      ds.field("entries", &self.entries());
      ds.finish()
  }
}
pub enum EntryOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Entry<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Entry<'a> {
  type Inner = Entry<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Entry<'a> {
  pub const VT_KIND: flatbuffers::VOffsetT = 4;
  pub const VT_OBJECT: flatbuffers::VOffsetT = 6;
  pub const VT_MODE: flatbuffers::VOffsetT = 8;
  pub const VT_SIZE_: flatbuffers::VOffsetT = 10;
  pub const VT_NAME: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Entry { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args EntryArgs<'args>
  ) -> flatbuffers::WIPOffset<Entry<'bldr>> {
    let mut builder = EntryBuilder::new(_fbb);
    builder.add_size_(args.size_);
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_mode(args.mode);
    if let Some(x) = args.object { builder.add_object(x); }
    builder.add_kind(args.kind);
    builder.finish()
  }


  #[inline]
  pub fn kind(&self) -> EntryKind {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EntryKind>(Entry::VT_KIND, Some(EntryKind::Blob)).unwrap()}
  }
  #[inline]
  pub fn object(&self) -> &'a Digest {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Digest>(Entry::VT_OBJECT, None).unwrap()}
  }
  #[inline]
  pub fn mode(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(Entry::VT_MODE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn size_(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Entry::VT_SIZE_, Some(0)).unwrap()}
  }
  #[inline]
  pub fn name(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Entry::VT_NAME, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for Entry<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<EntryKind>("kind", Self::VT_KIND, false)?
     .visit_field::<Digest>("object", Self::VT_OBJECT, true)?
     .visit_field::<u32>("mode", Self::VT_MODE, false)?
     .visit_field::<u64>("size_", Self::VT_SIZE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, true)?
     .finish();
    Ok(())
  }
}
pub struct EntryArgs<'a> {
    pub kind: EntryKind,
    pub object: Option<&'a Digest>,
    pub mode: u32,
    pub size_: u64,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for EntryArgs<'a> {
  #[inline]
  fn default() -> Self {
    EntryArgs {
      kind: EntryKind::Blob,
      object: None, // required field
      mode: 0,
      size_: 0,
      name: None, // required field
    }
  }
}

pub struct EntryBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> EntryBuilder<'a, 'b> {
  #[inline]
  pub fn add_kind(&mut self, kind: EntryKind) {
    self.fbb_.push_slot::<EntryKind>(Entry::VT_KIND, kind, EntryKind::Blob);
  }
  #[inline]
  pub fn add_object(&mut self, object: &Digest) {
    self.fbb_.push_slot_always::<&Digest>(Entry::VT_OBJECT, object);
  }
  #[inline]
  pub fn add_mode(&mut self, mode: u32) {
    self.fbb_.push_slot::<u32>(Entry::VT_MODE, mode, 0);
  }
  #[inline]
  pub fn add_size_(&mut self, size_: u64) {
    self.fbb_.push_slot::<u64>(Entry::VT_SIZE_, size_, 0);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Entry::VT_NAME, name);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> EntryBuilder<'a, 'b> {
    let start = _fbb.start_table();
    EntryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Entry<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Entry::VT_OBJECT,"object");
    self.fbb_.required(o, Entry::VT_NAME,"name");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Entry<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Entry");
      ds.field("kind", &self.kind());
      ds.field("object", &self.object());
      ds.field("mode", &self.mode());
      ds.field("size_", &self.size_());
      ds.field("name", &self.name());
      ds.finish()
  }
}
pub enum AnyObjectOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AnyObject<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AnyObject<'a> {
  type Inner = AnyObject<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AnyObject<'a> {
  pub const VT_OBJECT_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_OBJECT: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AnyObject { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args AnyObjectArgs
  ) -> flatbuffers::WIPOffset<AnyObject<'bldr>> {
    let mut builder = AnyObjectBuilder::new(_fbb);
    if let Some(x) = args.object { builder.add_object(x); }
    builder.add_object_type(args.object_type);
    builder.finish()
  }


  #[inline]
  pub fn object_type(&self) -> Object {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Object>(AnyObject::VT_OBJECT_TYPE, Some(Object::NONE)).unwrap()}
  }
  #[inline]
  pub fn object(&self) -> flatbuffers::Table<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(AnyObject::VT_OBJECT, None).unwrap()}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn object_as_platform(&self) -> Option<Platform<'a>> {
    if self.object_type() == Object::Platform {
      let u = self.object();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { Platform::init_from_table(u) })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn object_as_layer(&self) -> Option<Layer<'a>> {
    if self.object_type() == Object::Layer {
      let u = self.object();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { Layer::init_from_table(u) })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn object_as_manifest(&self) -> Option<Manifest<'a>> {
    if self.object_type() == Object::Manifest {
      let u = self.object();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { Manifest::init_from_table(u) })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn object_as_blob(&self) -> Option<Blob<'a>> {
    if self.object_type() == Object::Blob {
      let u = self.object();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { Blob::init_from_table(u) })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for AnyObject<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<Object, _>("object_type", Self::VT_OBJECT_TYPE, "object", Self::VT_OBJECT, true, |key, v, pos| {
        match key {
          Object::Platform => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Platform>>("Object::Platform", pos),
          Object::Layer => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Layer>>("Object::Layer", pos),
          Object::Manifest => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Manifest>>("Object::Manifest", pos),
          Object::Blob => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Blob>>("Object::Blob", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct AnyObjectArgs {
    pub object_type: Object,
    pub object: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for AnyObjectArgs {
  #[inline]
  fn default() -> Self {
    AnyObjectArgs {
      object_type: Object::NONE,
      object: None, // required field
    }
  }
}

pub struct AnyObjectBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AnyObjectBuilder<'a, 'b> {
  #[inline]
  pub fn add_object_type(&mut self, object_type: Object) {
    self.fbb_.push_slot::<Object>(AnyObject::VT_OBJECT_TYPE, object_type, Object::NONE);
  }
  #[inline]
  pub fn add_object(&mut self, object: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnyObject::VT_OBJECT, object);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AnyObjectBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AnyObjectBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AnyObject<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, AnyObject::VT_OBJECT,"object");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AnyObject<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AnyObject");
      ds.field("object_type", &self.object_type());
      match self.object_type() {
        Object::Platform => {
          if let Some(x) = self.object_as_platform() {
            ds.field("object", &x)
          } else {
            ds.field("object", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        Object::Layer => {
          if let Some(x) = self.object_as_layer() {
            ds.field("object", &x)
          } else {
            ds.field("object", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        Object::Manifest => {
          if let Some(x) = self.object_as_manifest() {
            ds.field("object", &x)
          } else {
            ds.field("object", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        Object::Blob => {
          if let Some(x) = self.object_as_blob() {
            ds.field("object", &x)
          } else {
            ds.field("object", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("object", &x)
        },
      };
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `AnyObject`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_any_object_unchecked`.
pub fn root_as_any_object(buf: &[u8]) -> Result<AnyObject, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AnyObject>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AnyObject` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_any_object_unchecked`.
pub fn size_prefixed_root_as_any_object(buf: &[u8]) -> Result<AnyObject, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AnyObject>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AnyObject` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_any_object_unchecked`.
pub fn root_as_any_object_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AnyObject<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AnyObject<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AnyObject` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_any_object_unchecked`.
pub fn size_prefixed_root_as_any_object_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AnyObject<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AnyObject<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AnyObject and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AnyObject`.
pub unsafe fn root_as_any_object_unchecked(buf: &[u8]) -> AnyObject {
  flatbuffers::root_unchecked::<AnyObject>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AnyObject and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AnyObject`.
pub unsafe fn size_prefixed_root_as_any_object_unchecked(buf: &[u8]) -> AnyObject {
  flatbuffers::size_prefixed_root_unchecked::<AnyObject>(buf)
}
#[inline]
pub fn finish_any_object_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<AnyObject<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_any_object_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<AnyObject<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
