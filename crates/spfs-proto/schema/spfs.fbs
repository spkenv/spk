// Copyright (c) Sony Pictures Imageworks, et al.
// SPDX-License-Identifier: Apache-2.0
// https://github.com/imageworks/spk

// when adding or modifying this file, take care to read
// the compatibility and evolution notes here:
// https://flatbuffers.dev/flatbuffers_guide_writing_schema.html
// In general, only add fields to the end of tables. Never add
// new fields to struct types.

union Object {
    Platform,
    Layer,
    Manifest,
    Blob,
}

table Platform {
    layers:[Digest] (required);
}

table Layer {
    manifest:Digest;
    // Can be empty
    annotations:[Annotation] (required);
}

table Manifest {
    /// Must be non-empty
    trees:[Tree] (required);
}

/// Blobs represent an arbitrary chunk of binary data, usually a file.
table Blob {
    size:uint64;
    payload:Digest (required);
}

/// Annotation data that is small enough is stored as a string in the
/// layer, large data is stored outside the layer in a blob object
/// pointed at by a digest
union AnnotationValue { AnnotationString, AnnotationDigest }

/// Needed because unions have to contain tables
table AnnotationString {
   data:string;
}
/// Needed because unions have to contain tables
table AnnotationDigest {
   digest:Digest;
}

/// Annotation data held in a layer for use by external tools run inside a runtime
table Annotation {
   key:string (required);
   data:AnnotationValue (required);
}

/// Digest is the result of a hashing operation over binary data.
struct Digest {
    bytes:[uint8:32]; // SHA-256 output len (256 / 8)
}

table Tree {
    entries:[Entry] (required);
}

enum EntryKind:uint8 {
    Blob = 0,
    /* Aligned to the rust ObjectKind type */
    Tree = 4,
    Mask = 5,
}

table Entry {
    kind:EntryKind;
    object:Digest (required);
    mode:uint32;
    size:uint64;
    name:string (required);
}


table AnyObject {
    object:Object (required);
}
root_type AnyObject;
